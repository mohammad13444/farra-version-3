- name: 🔑 Set up Signing Credentials (Final Fix)
  shell: bash
  run: |
    echo "🧩 Step 1: Decode and Prepare Certificates"

    CERT_P12_B64="${{ secrets.CERT_P12 }}"
    P12_PASS="${{ secrets.P12_PASSWORD }}"
    PP_B64="${{ secrets.PROVISIONING_PROFILE }}"

    # Decode P12
    echo "$CERT_P12_B64" | tr -d '\n' | base64 --decode > "${P12_FILE_NAME}" || {
        echo "::error::❌ Failed to decode P12. Check CERT_P12 secret content.";
        exit 1;
    }

    # Decode Provisioning Profile
    echo "$PP_B64" | tr -d '\n' | base64 --decode > "${PP_FILE_NAME}" || {
        echo "❌ Failed to decode Provisioning Profile";
        exit 1;
    }

    echo "---- 🔍 P12 INTEGRITY CHECK ----"
    ls -lah "${P12_FILE_NAME}"
    file "${P12_FILE_NAME}"

    # Check size
    P12_SIZE=$(stat -f%z "${P12_FILE_NAME}")
    if [ "$P12_SIZE" -lt 4000 ]; then
      echo "::error::❌ CRITICAL: Decoded P12 too small (${P12_SIZE} B). Secret is incomplete or corrupt. Expected size ~4.8K."
      exit 1
    fi

    # Check with OpenSSL
    openssl pkcs12 -in "${P12_FILE_NAME}" -noout -info -passin pass:"$P12_PASS" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "::error::❌ CRITICAL: OpenSSL cannot read the P12 file. The file is corrupt."
      echo "::error::Re-upload CERT_P12 secret with correct Base64."
      exit 1
    fi

    echo "✅ OpenSSL verified P12 integrity!"
    echo "------------------------------------"

    echo "🔐 Step 2: Create Temporary Keychain"
    security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
    security default-keychain -s build.keychain
    security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
    security set-keychain-settings -lut 7200 build.keychain

    echo "📥 Step 3: Import Certificates"
    security import "${P12_FILE_NAME}" \
      -k build.keychain \
      -P "$P12_PASS" \
      -A -t cert -T /usr/bin/codesign || {
      echo "::error::❌ Failed to import certificate (Keychain Error).";
      exit 1;
    }
    echo "✅ Certificate imported successfully."

    echo "🔓 Step 4: Grant Codesign Access"
    security set-key-partition-list -S apple-tool: -S apple: \
      -k "$KEYCHAIN_PASSWORD" \
      -D "Apple Distribution" \
      build.keychain

    echo "📲 Step 5: Install Provisioning Profile"
    PP_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(security cms -D -i "${PP_FILE_NAME}")")
    mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    mv "${PP_FILE_NAME}" ~/Library/MobileDevice/Provisioning\ Profiles/"$PP_UUID".mobileprovision
    echo "✅ Profile installed with UUID: $PP_UUID"
