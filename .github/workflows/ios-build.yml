name: iOS Cordova Build and Sign (Farra)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    env:
      IPA_NAME: farra-signed.ipa
      PP_FILE_NAME: Farra_iOS_AppStore_72M97MR8UU.mobileprovision
      P12_FILE_NAME: ios_distribution.p12
      KEYCHAIN_PASSWORD: actions-keychain-pass

    steps:
    - name: ⬇️ Checkout Repository
      uses: actions/checkout@v4

    - name: 📥 Install Dependencies
      run: |
        npm install -g cordova
        npm install

    - name: 📱 Add iOS Platform
      run: |
        npx cordova platform remove ios || true
        npx cordova platform add ios --save --no-fetch

    - name: 🔑 Set up Signing Credentials
      env:
        P12_B64: ${{ secrets.CERT_P12 }}
        PP_B64: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        echo "🧩 Step 1: Decode and Prepare Certificates"
        printf "%s" "$P12_B64" | base64 --decode > "${P12_FILE_NAME}" || { echo "❌ Failed to decode P12"; exit 1; }
        printf "%s" "$PP_B64" | base64 --decode > "${PP_FILE_NAME}" || { echo "❌ Failed to decode Provisioning Profile"; exit 1; }

        echo "---- 🔍 Debugging P12 integrity ----"
        ls -lah "${P12_FILE_NAME}"
        file "${P12_FILE_NAME}"
        head -c 64 "${P12_FILE_NAME}" | hexdump -C
        echo "------------------------------------"

        echo "🔐 Step 2: Create Temporary Keychain"
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -lut 7200 build.keychain

        echo "📥 Step 3: Import Certificates"
        security import "${P12_FILE_NAME}" -k build.keychain -P "$KEYCHAIN_PASSWORD" -A -t cert -T /usr/bin/codesign || {
          echo "❌ Failed to import certificate, probably invalid/unsupported format."
          ls -lah
          exit 1
        }

        echo "🔓 Step 4: Grant Codesign Access"
        security set-key-partition-list -S apple-tool: -S apple: -k "$KEYCHAIN_PASSWORD" -D "Apple Distribution" build.keychain

        echo "📲 Step 5: Install Provisioning Profile"
        PP_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(security cms -D -i "${PP_FILE_NAME}")")
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        mv "${PP_FILE_NAME}" ~/Library/MobileDevice/Provisioning\ Profiles/"$PP_UUID".mobileprovision
        echo "✅ Profile installed with UUID: $PP_UUID"

    - name: 🛠️ Configure Xcode Signing Parameters
      run: |
        echo "⚙️ Injecting Signing Config into build.xcconfig..."
        TEAM_ID="${{ secrets.TEAM_ID }}"
        sed -i '' "s/DEVELOPMENT_TEAM =.*/DEVELOPMENT_TEAM = ${TEAM_ID};/" platforms/ios/cordova/build.xcconfig || exit 1
        sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER =.*/PROVISIONING_PROFILE_SPECIFIER = Farra_iOS_AppStore_72M97MR8UU;/" platforms/ios/cordova/build.xcconfig
        sed -i '' "s/CODE_SIGN_IDENTITY =.*/CODE_SIGN_IDENTITY = Apple Distribution;/" platforms/ios/cordova/build.xcconfig
        sed -i '' "s/CODE_SIGN_STYLE =.*/CODE_SIGN_STYLE = Manual;/" platforms/ios/cordova/build.xcconfig

    - name: 🏗️ Cordova Build iOS (App Store)
      run: |
        echo "🏗️ Building iOS Release..."
        npx cordova build ios --release --device || { echo "❌ Cordova build failed"; exit 1; }

    - name: 📦 Locate and Rename IPA
      run: |
        echo "🔎 Locating IPA Export..."
        IPA_PATH=$(find platforms/ios/build/ -name "*.ipa" -print -quit)
        if [ -n "$IPA_PATH" ]; then
          mv "$IPA_PATH" "${IPA_NAME}"
          echo "✅ IPA exported successfully: ${IPA_NAME}"
        else
          echo "::error::❌ Could not find the generated IPA file."
          exit 1
        fi

    - name: 📤 Upload Signed IPA
      uses: actions/upload-artifact@v4
      with:
        name: farra-app-store-ipa
        path: ${{ env.IPA_NAME }}
        retention-days: 7

    - name: 🗑️ Cleanup Keychain and Temps
      if: always()
      run: |
        echo "🧹 Cleaning temporary files..."
        security delete-keychain build.keychain || true
        rm -f "${P12_FILE_NAME}" || true
        rm -f "${PP_FILE_NAME}" || true
